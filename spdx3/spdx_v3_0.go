// package spdx_v3_0 provides structs for SPDX 3.0
//
// This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
//
// SPDX-License-Identifier: MIT

package spdx_v3_0

import "github.com/orsinium-labs/enum"

// XSD types that don't have a Go equivalent
type PInt uint

func (p PInt) Check() PInt {
	if p == 0 {
		panic("0 Assignment not allowed for PInt")
	}
	return p
}

type DateTime string

type DateTimeStamp string

// Named Individuals handling
type AiEnergyUnitTypeRef enum.Member[string]
var (

	AiEnergyUnitTypeKilowattHour = AiEnergyUnitTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/EnergyUnitType/kilowattHour"}

	AiEnergyUnitTypeMegajoule = AiEnergyUnitTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/EnergyUnitType/megajoule"}

	AiEnergyUnitTypeOther = AiEnergyUnitTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/EnergyUnitType/other"}

)
type AiSafetyRiskAssessmentTypeRef enum.Member[string]
var (

	AiSafetyRiskAssessmentTypeHigh = AiSafetyRiskAssessmentTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/SafetyRiskAssessmentType/high"}

	AiSafetyRiskAssessmentTypeLow = AiSafetyRiskAssessmentTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/SafetyRiskAssessmentType/low"}

	AiSafetyRiskAssessmentTypeMedium = AiSafetyRiskAssessmentTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/SafetyRiskAssessmentType/medium"}

	AiSafetyRiskAssessmentTypeSerious = AiSafetyRiskAssessmentTypeRef{"https://spdx.org/rdf/3.0.0/terms/AI/SafetyRiskAssessmentType/serious"}

)
type AnnotationTypeRef enum.Member[string]
var (

	AnnotationTypeOther = AnnotationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/AnnotationType/other"}

	AnnotationTypeReview = AnnotationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/AnnotationType/review"}

)
type ExternalIdentifierTypeRef enum.Member[string]
var (

	ExternalIdentifierTypeCpe22 = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/cpe22"}

	ExternalIdentifierTypeCpe23 = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/cpe23"}

	ExternalIdentifierTypeCve = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/cve"}

	ExternalIdentifierTypeEmail = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/email"}

	ExternalIdentifierTypeGitoid = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/gitoid"}

	ExternalIdentifierTypeOther = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/other"}

	ExternalIdentifierTypePackageUrl = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/packageUrl"}

	ExternalIdentifierTypeSecurityOther = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/securityOther"}

	ExternalIdentifierTypeSwhid = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/swhid"}

	ExternalIdentifierTypeSwid = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/swid"}

	ExternalIdentifierTypeUrlScheme = ExternalIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalIdentifierType/urlScheme"}

)
type ExternalRefTypeRef enum.Member[string]
var (

	ExternalRefTypeAltDownloadLocation = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/altDownloadLocation"}

	ExternalRefTypeAltWebPage = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/altWebPage"}

	ExternalRefTypeBinaryArtifact = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/binaryArtifact"}

	ExternalRefTypeBower = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/bower"}

	ExternalRefTypeBuildMeta = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/buildMeta"}

	ExternalRefTypeBuildSystem = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/buildSystem"}

	ExternalRefTypeCertificationReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/certificationReport"}

	ExternalRefTypeChat = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/chat"}

	ExternalRefTypeComponentAnalysisReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/componentAnalysisReport"}

	ExternalRefTypeCwe = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/cwe"}

	ExternalRefTypeDocumentation = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/documentation"}

	ExternalRefTypeDynamicAnalysisReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/dynamicAnalysisReport"}

	ExternalRefTypeEolNotice = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/eolNotice"}

	ExternalRefTypeExportControlAssessment = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/exportControlAssessment"}

	ExternalRefTypeFunding = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/funding"}

	ExternalRefTypeIssueTracker = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/issueTracker"}

	ExternalRefTypeLicense = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/license"}

	ExternalRefTypeMailingList = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/mailingList"}

	ExternalRefTypeMavenCentral = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/mavenCentral"}

	ExternalRefTypeMetrics = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/metrics"}

	ExternalRefTypeNpm = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/npm"}

	ExternalRefTypeNuget = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/nuget"}

	ExternalRefTypeOther = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/other"}

	ExternalRefTypePrivacyAssessment = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/privacyAssessment"}

	ExternalRefTypeProductMetadata = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/productMetadata"}

	ExternalRefTypePurchaseOrder = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/purchaseOrder"}

	ExternalRefTypeQualityAssessmentReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/qualityAssessmentReport"}

	ExternalRefTypeReleaseHistory = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/releaseHistory"}

	ExternalRefTypeReleaseNotes = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/releaseNotes"}

	ExternalRefTypeRiskAssessment = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/riskAssessment"}

	ExternalRefTypeRuntimeAnalysisReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/runtimeAnalysisReport"}

	ExternalRefTypeSecureSoftwareAttestation = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/secureSoftwareAttestation"}

	ExternalRefTypeSecurityAdversaryModel = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityAdversaryModel"}

	ExternalRefTypeSecurityAdvisory = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityAdvisory"}

	ExternalRefTypeSecurityFix = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityFix"}

	ExternalRefTypeSecurityOther = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityOther"}

	ExternalRefTypeSecurityPenTestReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityPenTestReport"}

	ExternalRefTypeSecurityPolicy = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityPolicy"}

	ExternalRefTypeSecurityThreatModel = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/securityThreatModel"}

	ExternalRefTypeSocialMedia = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/socialMedia"}

	ExternalRefTypeSourceArtifact = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/sourceArtifact"}

	ExternalRefTypeStaticAnalysisReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/staticAnalysisReport"}

	ExternalRefTypeSupport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/support"}

	ExternalRefTypeVcs = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/vcs"}

	ExternalRefTypeVulnerabilityDisclosureReport = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/vulnerabilityDisclosureReport"}

	ExternalRefTypeVulnerabilityExploitabilityAssessment = ExternalRefTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ExternalRefType/vulnerabilityExploitabilityAssessment"}

)
type HashAlgorithmRef enum.Member[string]
var (

	HashAlgorithmBlake2b256 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/blake2b256"}

	HashAlgorithmBlake2b384 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/blake2b384"}

	HashAlgorithmBlake2b512 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/blake2b512"}

	HashAlgorithmBlake3 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/blake3"}

	HashAlgorithmCrystalsDilithium = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/crystalsDilithium"}

	HashAlgorithmCrystalsKyber = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/crystalsKyber"}

	HashAlgorithmFalcon = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/falcon"}

	HashAlgorithmMd2 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/md2"}

	HashAlgorithmMd4 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/md4"}

	HashAlgorithmMd5 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/md5"}

	HashAlgorithmMd6 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/md6"}

	HashAlgorithmOther = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/other"}

	HashAlgorithmSha1 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha1"}

	HashAlgorithmSha224 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha224"}

	HashAlgorithmSha256 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha256"}

	HashAlgorithmSha384 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha384"}

	HashAlgorithmSha3224 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha3_224"}

	HashAlgorithmSha3256 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha3_256"}

	HashAlgorithmSha3384 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha3_384"}

	HashAlgorithmSha3512 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha3_512"}

	HashAlgorithmSha512 = HashAlgorithmRef{"https://spdx.org/rdf/3.0.0/terms/Core/HashAlgorithm/sha512"}

)
type LifecycleScopeTypeRef enum.Member[string]
var (

	LifecycleScopeTypeBuild = LifecycleScopeTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/LifecycleScopeType/build"}

	LifecycleScopeTypeDesign = LifecycleScopeTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/LifecycleScopeType/design"}

	LifecycleScopeTypeDevelopment = LifecycleScopeTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/LifecycleScopeType/development"}

	LifecycleScopeTypeOther = LifecycleScopeTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/LifecycleScopeType/other"}

	LifecycleScopeTypeRuntime = LifecycleScopeTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/LifecycleScopeType/runtime"}

	LifecycleScopeTypeTest = LifecycleScopeTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/LifecycleScopeType/test"}

)
type PresenceTypeRef enum.Member[string]
var (

	PresenceTypeNo = PresenceTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/PresenceType/no"}

	PresenceTypeNoAssertion = PresenceTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/PresenceType/noAssertion"}

	PresenceTypeYes = PresenceTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/PresenceType/yes"}

)
type ProfileIdentifierTypeRef enum.Member[string]
var (

	ProfileIdentifierTypeAi = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/ai"}

	ProfileIdentifierTypeBuild = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/build"}

	ProfileIdentifierTypeCore = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/core"}

	ProfileIdentifierTypeDataset = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/dataset"}

	ProfileIdentifierTypeExpandedLicensing = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/expandedLicensing"}

	ProfileIdentifierTypeExtension = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/extension"}

	ProfileIdentifierTypeSecurity = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/security"}

	ProfileIdentifierTypeSimpleLicensing = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/simpleLicensing"}

	ProfileIdentifierTypeSoftware = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/software"}

	ProfileIdentifierTypeUsage = ProfileIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/ProfileIdentifierType/usage"}

)
type RelationshipCompletenessRef enum.Member[string]
var (

	RelationshipCompletenessComplete = RelationshipCompletenessRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipCompleteness/complete"}

	RelationshipCompletenessIncomplete = RelationshipCompletenessRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipCompleteness/incomplete"}

	RelationshipCompletenessNoAssertion = RelationshipCompletenessRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipCompleteness/noAssertion"}

)
type RelationshipTypeRef enum.Member[string]
var (

	RelationshipTypeAffects = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/affects"}

	RelationshipTypeAmendedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/amendedBy"}

	RelationshipTypeAncestorOf = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/ancestorOf"}

	RelationshipTypeAvailableFrom = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/availableFrom"}

	RelationshipTypeConfigures = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/configures"}

	RelationshipTypeContains = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/contains"}

	RelationshipTypeCoordinatedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/coordinatedBy"}

	RelationshipTypeCopiedTo = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/copiedTo"}

	RelationshipTypeDelegatedTo = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/delegatedTo"}

	RelationshipTypeDependsOn = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/dependsOn"}

	RelationshipTypeDescendantOf = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/descendantOf"}

	RelationshipTypeDescribes = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/describes"}

	RelationshipTypeDoesNotAffect = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/doesNotAffect"}

	RelationshipTypeExpandsTo = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/expandsTo"}

	RelationshipTypeExploitCreatedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/exploitCreatedBy"}

	RelationshipTypeFixedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/fixedBy"}

	RelationshipTypeFixedIn = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/fixedIn"}

	RelationshipTypeFoundBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/foundBy"}

	RelationshipTypeGenerates = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/generates"}

	RelationshipTypeHasAddedFile = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasAddedFile"}

	RelationshipTypeHasAssessmentFor = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasAssessmentFor"}

	RelationshipTypeHasAssociatedVulnerability = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasAssociatedVulnerability"}

	RelationshipTypeHasConcludedLicense = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasConcludedLicense"}

	RelationshipTypeHasDataFile = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDataFile"}

	RelationshipTypeHasDeclaredLicense = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDeclaredLicense"}

	RelationshipTypeHasDeletedFile = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDeletedFile"}

	RelationshipTypeHasDependencyManifest = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDependencyManifest"}

	RelationshipTypeHasDistributionArtifact = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDistributionArtifact"}

	RelationshipTypeHasDocumentation = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDocumentation"}

	RelationshipTypeHasDynamicLink = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasDynamicLink"}

	RelationshipTypeHasEvidence = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasEvidence"}

	RelationshipTypeHasExample = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasExample"}

	RelationshipTypeHasHost = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasHost"}

	RelationshipTypeHasInputs = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasInputs"}

	RelationshipTypeHasMetadata = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasMetadata"}

	RelationshipTypeHasOptionalComponent = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasOptionalComponent"}

	RelationshipTypeHasOptionalDependency = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasOptionalDependency"}

	RelationshipTypeHasOutputs = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasOutputs"}

	RelationshipTypeHasPrerequsite = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasPrerequsite"}

	RelationshipTypeHasProvidedDependency = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasProvidedDependency"}

	RelationshipTypeHasRequirement = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasRequirement"}

	RelationshipTypeHasSpecification = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasSpecification"}

	RelationshipTypeHasStaticLink = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasStaticLink"}

	RelationshipTypeHasTest = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasTest"}

	RelationshipTypeHasTestCase = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasTestCase"}

	RelationshipTypeHasVariant = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/hasVariant"}

	RelationshipTypeInvokedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/invokedBy"}

	RelationshipTypeModifiedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/modifiedBy"}

	RelationshipTypeOther = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/other"}

	RelationshipTypePackagedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/packagedBy"}

	RelationshipTypePatchedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/patchedBy"}

	RelationshipTypePublishedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/publishedBy"}

	RelationshipTypeReportedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/reportedBy"}

	RelationshipTypeRepublishedBy = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/republishedBy"}

	RelationshipTypeSerializedInArtifact = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/serializedInArtifact"}

	RelationshipTypeTestedOn = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/testedOn"}

	RelationshipTypeTrainedOn = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/trainedOn"}

	RelationshipTypeUnderInvestigationFor = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/underInvestigationFor"}

	RelationshipTypeUsesTool = RelationshipTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/RelationshipType/usesTool"}

)
type SupportTypeRef enum.Member[string]
var (

	SupportTypeDeployed = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/deployed"}

	SupportTypeDevelopment = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/development"}

	SupportTypeEndOfSupport = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/endOfSupport"}

	SupportTypeLimitedSupport = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/limitedSupport"}

	SupportTypeNoAssertion = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/noAssertion"}

	SupportTypeNoSupport = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/noSupport"}

	SupportTypeSupport = SupportTypeRef{"https://spdx.org/rdf/3.0.0/terms/Core/SupportType/support"}

)
type DatasetConfidentialityLevelTypeRef enum.Member[string]
var (

	DatasetConfidentialityLevelTypeAmber = DatasetConfidentialityLevelTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/ConfidentialityLevelType/amber"}

	DatasetConfidentialityLevelTypeClear = DatasetConfidentialityLevelTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/ConfidentialityLevelType/clear"}

	DatasetConfidentialityLevelTypeGreen = DatasetConfidentialityLevelTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/ConfidentialityLevelType/green"}

	DatasetConfidentialityLevelTypeRed = DatasetConfidentialityLevelTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/ConfidentialityLevelType/red"}

)
type DatasetDatasetAvailabilityTypeRef enum.Member[string]
var (

	DatasetDatasetAvailabilityTypeClickthrough = DatasetDatasetAvailabilityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetAvailabilityType/clickthrough"}

	DatasetDatasetAvailabilityTypeDirectDownload = DatasetDatasetAvailabilityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetAvailabilityType/directDownload"}

	DatasetDatasetAvailabilityTypeQuery = DatasetDatasetAvailabilityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetAvailabilityType/query"}

	DatasetDatasetAvailabilityTypeRegistration = DatasetDatasetAvailabilityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetAvailabilityType/registration"}

	DatasetDatasetAvailabilityTypeScrapingScript = DatasetDatasetAvailabilityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetAvailabilityType/scrapingScript"}

)
type DatasetDatasetTypeRef enum.Member[string]
var (

	DatasetDatasetTypeAudio = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/audio"}

	DatasetDatasetTypeCategorical = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/categorical"}

	DatasetDatasetTypeGraph = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/graph"}

	DatasetDatasetTypeImage = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/image"}

	DatasetDatasetTypeNoAssertion = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/noAssertion"}

	DatasetDatasetTypeNumeric = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/numeric"}

	DatasetDatasetTypeOther = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/other"}

	DatasetDatasetTypeSensor = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/sensor"}

	DatasetDatasetTypeStructured = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/structured"}

	DatasetDatasetTypeSyntactic = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/syntactic"}

	DatasetDatasetTypeText = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/text"}

	DatasetDatasetTypeTimeseries = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/timeseries"}

	DatasetDatasetTypeTimestamp = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/timestamp"}

	DatasetDatasetTypeVideo = DatasetDatasetTypeRef{"https://spdx.org/rdf/3.0.0/terms/Dataset/DatasetType/video"}

)
type SecurityCvssSeverityTypeRef enum.Member[string]
var (

	SecurityCvssSeverityTypeCritical = SecurityCvssSeverityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/CvssSeverityType/critical"}

	SecurityCvssSeverityTypeHigh = SecurityCvssSeverityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/CvssSeverityType/high"}

	SecurityCvssSeverityTypeLow = SecurityCvssSeverityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/CvssSeverityType/low"}

	SecurityCvssSeverityTypeMedium = SecurityCvssSeverityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/CvssSeverityType/medium"}

	SecurityCvssSeverityTypeNone = SecurityCvssSeverityTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/CvssSeverityType/none"}

)
type SecurityExploitCatalogTypeRef enum.Member[string]
var (

	SecurityExploitCatalogTypeKev = SecurityExploitCatalogTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/ExploitCatalogType/kev"}

	SecurityExploitCatalogTypeOther = SecurityExploitCatalogTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/ExploitCatalogType/other"}

)
type SecuritySsvcDecisionTypeRef enum.Member[string]
var (

	SecuritySsvcDecisionTypeAct = SecuritySsvcDecisionTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/SsvcDecisionType/act"}

	SecuritySsvcDecisionTypeAttend = SecuritySsvcDecisionTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/SsvcDecisionType/attend"}

	SecuritySsvcDecisionTypeTrack = SecuritySsvcDecisionTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/SsvcDecisionType/track"}

	SecuritySsvcDecisionTypeTrackStar = SecuritySsvcDecisionTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/SsvcDecisionType/trackStar"}

)
type SecurityVexJustificationTypeRef enum.Member[string]
var (

	SecurityVexJustificationTypeComponentNotPresent = SecurityVexJustificationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/VexJustificationType/componentNotPresent"}

	SecurityVexJustificationTypeInlineMitigationsAlreadyExist = SecurityVexJustificationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/VexJustificationType/inlineMitigationsAlreadyExist"}

	SecurityVexJustificationTypeVulnerableCodeCannotBeControlledByAdversary = SecurityVexJustificationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/VexJustificationType/vulnerableCodeCannotBeControlledByAdversary"}

	SecurityVexJustificationTypeVulnerableCodeNotInExecutePath = SecurityVexJustificationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/VexJustificationType/vulnerableCodeNotInExecutePath"}

	SecurityVexJustificationTypeVulnerableCodeNotPresent = SecurityVexJustificationTypeRef{"https://spdx.org/rdf/3.0.0/terms/Security/VexJustificationType/vulnerableCodeNotPresent"}

)
type SoftwareContentIdentifierTypeRef enum.Member[string]
var (

	SoftwareContentIdentifierTypeGitoid = SoftwareContentIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/ContentIdentifierType/gitoid"}

	SoftwareContentIdentifierTypeSwhid = SoftwareContentIdentifierTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/ContentIdentifierType/swhid"}

)
type SoftwareFileKindTypeRef enum.Member[string]
var (

	SoftwareFileKindTypeDirectory = SoftwareFileKindTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/FileKindType/directory"}

	SoftwareFileKindTypeFile = SoftwareFileKindTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/FileKindType/file"}

)
type SoftwareSbomTypeRef enum.Member[string]
var (

	SoftwareSbomTypeAnalyzed = SoftwareSbomTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SbomType/analyzed"}

	SoftwareSbomTypeBuild = SoftwareSbomTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SbomType/build"}

	SoftwareSbomTypeDeployed = SoftwareSbomTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SbomType/deployed"}

	SoftwareSbomTypeDesign = SoftwareSbomTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SbomType/design"}

	SoftwareSbomTypeRuntime = SoftwareSbomTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SbomType/runtime"}

	SoftwareSbomTypeSource = SoftwareSbomTypeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SbomType/source"}

)
type SoftwareSoftwarePurposeRef enum.Member[string]
var (

	SoftwareSoftwarePurposeApplication = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/application"}

	SoftwareSoftwarePurposeArchive = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/archive"}

	SoftwareSoftwarePurposeBom = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/bom"}

	SoftwareSoftwarePurposeConfiguration = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/configuration"}

	SoftwareSoftwarePurposeContainer = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/container"}

	SoftwareSoftwarePurposeData = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/data"}

	SoftwareSoftwarePurposeDevice = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/device"}

	SoftwareSoftwarePurposeDeviceDriver = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/deviceDriver"}

	SoftwareSoftwarePurposeDiskImage = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/diskImage"}

	SoftwareSoftwarePurposeDocumentation = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/documentation"}

	SoftwareSoftwarePurposeEvidence = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/evidence"}

	SoftwareSoftwarePurposeExecutable = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/executable"}

	SoftwareSoftwarePurposeFile = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/file"}

	SoftwareSoftwarePurposeFilesystemImage = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/filesystemImage"}

	SoftwareSoftwarePurposeFirmware = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/firmware"}

	SoftwareSoftwarePurposeFramework = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/framework"}

	SoftwareSoftwarePurposeInstall = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/install"}

	SoftwareSoftwarePurposeLibrary = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/library"}

	SoftwareSoftwarePurposeManifest = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/manifest"}

	SoftwareSoftwarePurposeModel = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/model"}

	SoftwareSoftwarePurposeModule = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/module"}

	SoftwareSoftwarePurposeOperatingSystem = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/operatingSystem"}

	SoftwareSoftwarePurposeOther = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/other"}

	SoftwareSoftwarePurposePatch = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/patch"}

	SoftwareSoftwarePurposePlatform = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/platform"}

	SoftwareSoftwarePurposeRequirement = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/requirement"}

	SoftwareSoftwarePurposeSource = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/source"}

	SoftwareSoftwarePurposeSpecification = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/specification"}

	SoftwareSoftwarePurposeTest = SoftwareSoftwarePurposeRef{"https://spdx.org/rdf/3.0.0/terms/Software/SoftwarePurpose/test"}

)



var CONTEXT_URLS  [1]string = [1]string{"https://spdx.github.io/spdx-spec/v3.0/model/spdx-context.jsonld"}

// CLASSES
// AiEnergyConsumption provides the AiEnergyConsumption class in the Model
type AiEnergyConsumption struct {
	AiFinetuningEnergyConsumption AiEnergyConsumptionDescription
	AiInferenceEnergyConsumption AiEnergyConsumptionDescription
	AiTrainingEnergyConsumption AiEnergyConsumptionDescription
}
// AiEnergyConsumptionDescription provides the AiEnergyConsumptionDescription class in the Model
type AiEnergyConsumptionDescription struct {
	AiEnergyQuantity []float64
	AiEnergyUnit []AiEnergyUnitType
}
// AiEnergyUnitType provides the AiEnergyUnitType class in the Model
type AiEnergyUnitType struct {
	ObjectRef AiEnergyUnitTypeRef
}
// AiSafetyRiskAssessmentType provides the AiSafetyRiskAssessmentType class in the Model
type AiSafetyRiskAssessmentType struct {
	ObjectRef AiSafetyRiskAssessmentTypeRef
}
// AnnotationType provides the AnnotationType class in the Model
type AnnotationType struct {
	ObjectRef AnnotationTypeRef
}
// CreationInfo provides the CreationInfo class in the Model
type CreationInfo struct {
	Comment []string
	Created []DateTimeStamp
	CreatedBy Agent
	CreatedUsing Tool
	SpecVersion []string
}
// DictionaryEntry provides the DictionaryEntry class in the Model
type DictionaryEntry struct {
	Key []string
	Value []string
}
// Element provides the Element class in the Model
type Element struct {
	Comment []string
	CreationInfo []CreationInfo
	Description []string
	Extension ExtensionExtension
	ExternalIdentifier ExternalIdentifier
	ExternalRef ExternalRef
	Name []string
	Summary []string
	VerifiedUsing IntegrityMethod
}
// ElementCollection provides the ElementCollection class in the Model
type ElementCollection struct {
	Element
	Element Element
	ProfileConformance ProfileIdentifierType
	RootElement Element
}
// ExternalIdentifier provides the ExternalIdentifier class in the Model
type ExternalIdentifier struct {
	Comment []string
	ExternalIdentifierType []ExternalIdentifierType
	Identifier []string
	IdentifierLocator string
	IssuingAuthority []string
}
// ExternalIdentifierType provides the ExternalIdentifierType class in the Model
type ExternalIdentifierType struct {
	ObjectRef ExternalIdentifierTypeRef
}
// ExternalMap provides the ExternalMap class in the Model
type ExternalMap struct {
	DefiningArtifact []Artifact
	ExternalSpdxId []string
	LocationHint []string
	VerifiedUsing IntegrityMethod
}
// ExternalRef provides the ExternalRef class in the Model
type ExternalRef struct {
	Comment []string
	ContentType []string
	ExternalRefType []ExternalRefType
	Locator string
}
// ExternalRefType provides the ExternalRefType class in the Model
type ExternalRefType struct {
	ObjectRef ExternalRefTypeRef
}
// HashAlgorithm provides the HashAlgorithm class in the Model
type HashAlgorithm struct {
	ObjectRef HashAlgorithmRef
}
// IntegrityMethod provides the IntegrityMethod class in the Model
type IntegrityMethod struct {
	Comment []string
}
// LifecycleScopeType provides the LifecycleScopeType class in the Model
type LifecycleScopeType struct {
	ObjectRef LifecycleScopeTypeRef
}
// NamespaceMap provides the NamespaceMap class in the Model
type NamespaceMap struct {
	Namespace []string
	Prefix []string
}
// PackageVerificationCode provides the PackageVerificationCode class in the Model
type PackageVerificationCode struct {
	IntegrityMethod
	Algorithm []HashAlgorithm
	HashValue []string
	PackageVerificationCodeExcludedFile string
}
// PositiveIntegerRange provides the PositiveIntegerRange class in the Model
type PositiveIntegerRange struct {
	BeginIntegerRange []PInt
	EndIntegerRange []PInt
}
// PresenceType provides the PresenceType class in the Model
type PresenceType struct {
	ObjectRef PresenceTypeRef
}
// ProfileIdentifierType provides the ProfileIdentifierType class in the Model
type ProfileIdentifierType struct {
	ObjectRef ProfileIdentifierTypeRef
}
// Relationship provides the Relationship class in the Model
type Relationship struct {
	Element
	Completeness []RelationshipCompleteness
	EndTime []DateTimeStamp
	From []Element
	RelationshipType []RelationshipType
	StartTime []DateTimeStamp
	To Element
}
// RelationshipCompleteness provides the RelationshipCompleteness class in the Model
type RelationshipCompleteness struct {
	ObjectRef RelationshipCompletenessRef
}
// RelationshipType provides the RelationshipType class in the Model
type RelationshipType struct {
	ObjectRef RelationshipTypeRef
}
// SpdxDocument provides the SpdxDocument class in the Model
type SpdxDocument struct {
	ElementCollection
	DataLicense []SimplelicensingAnyLicenseInfo
	Imports ExternalMap
	NamespaceMap NamespaceMap
}
// SupportType provides the SupportType class in the Model
type SupportType struct {
	ObjectRef SupportTypeRef
}
// Tool provides the Tool class in the Model
type Tool struct {
	Element
}
// DatasetConfidentialityLevelType provides the DatasetConfidentialityLevelType class in the Model
type DatasetConfidentialityLevelType struct {
	ObjectRef DatasetConfidentialityLevelTypeRef
}
// DatasetDatasetAvailabilityType provides the DatasetDatasetAvailabilityType class in the Model
type DatasetDatasetAvailabilityType struct {
	ObjectRef DatasetDatasetAvailabilityTypeRef
}
// DatasetDatasetType provides the DatasetDatasetType class in the Model
type DatasetDatasetType struct {
	ObjectRef DatasetDatasetTypeRef
}
// ExpandedlicensingLicenseAddition provides the ExpandedlicensingLicenseAddition class in the Model
type ExpandedlicensingLicenseAddition struct {
	Element
	ExpandedlicensingAdditionText []string
	ExpandedlicensingIsDeprecatedAdditionId []bool
	ExpandedlicensingLicenseXml []string
	ExpandedlicensingObsoletedBy []string
	ExpandedlicensingSeeAlso string
	ExpandedlicensingStandardAdditionTemplate []string
}
// ExpandedlicensingListedLicenseException provides the ExpandedlicensingListedLicenseException class in the Model
type ExpandedlicensingListedLicenseException struct {
	ExpandedlicensingLicenseAddition
	ExpandedlicensingDeprecatedVersion []string
	ExpandedlicensingListVersionAdded []string
}
// ExtensionCdxPropertyEntry provides the ExtensionCdxPropertyEntry class in the Model
type ExtensionCdxPropertyEntry struct {
	ExtensionCdxPropName []string
	ExtensionCdxPropValue []string
}
// ExtensionExtension provides the ExtensionExtension class in the Model
type ExtensionExtension struct {
}
// SecurityCvssSeverityType provides the SecurityCvssSeverityType class in the Model
type SecurityCvssSeverityType struct {
	ObjectRef SecurityCvssSeverityTypeRef
}
// SecurityExploitCatalogType provides the SecurityExploitCatalogType class in the Model
type SecurityExploitCatalogType struct {
	ObjectRef SecurityExploitCatalogTypeRef
}
// SecuritySsvcDecisionType provides the SecuritySsvcDecisionType class in the Model
type SecuritySsvcDecisionType struct {
	ObjectRef SecuritySsvcDecisionTypeRef
}
// SecurityVexJustificationType provides the SecurityVexJustificationType class in the Model
type SecurityVexJustificationType struct {
	ObjectRef SecurityVexJustificationTypeRef
}
// SecurityVulnAssessmentRelationship provides the SecurityVulnAssessmentRelationship class in the Model
type SecurityVulnAssessmentRelationship struct {
	Relationship
	SuppliedBy []Agent
	SecurityAssessedElement []Element
	SecurityModifiedTime []DateTimeStamp
	SecurityPublishedTime []DateTimeStamp
	SecurityWithdrawnTime []DateTimeStamp
}
// SimplelicensingAnyLicenseInfo provides the SimplelicensingAnyLicenseInfo class in the Model
type SimplelicensingAnyLicenseInfo struct {
	Element
}
// SimplelicensingLicenseExpression provides the SimplelicensingLicenseExpression class in the Model
type SimplelicensingLicenseExpression struct {
	SimplelicensingAnyLicenseInfo
	SimplelicensingCustomIdToUri DictionaryEntry
	SimplelicensingLicenseExpression []string
	SimplelicensingLicenseListVersion []string
}
// SimplelicensingSimpleLicensingText provides the SimplelicensingSimpleLicensingText class in the Model
type SimplelicensingSimpleLicensingText struct {
	Element
	SimplelicensingLicenseText []string
}
// SoftwareContentIdentifier provides the SoftwareContentIdentifier class in the Model
type SoftwareContentIdentifier struct {
	IntegrityMethod
	SoftwareContentIdentifierType []SoftwareContentIdentifierType
	SoftwareContentIdentifierValue []string
}
// SoftwareContentIdentifierType provides the SoftwareContentIdentifierType class in the Model
type SoftwareContentIdentifierType struct {
	ObjectRef SoftwareContentIdentifierTypeRef
}
// SoftwareFileKindType provides the SoftwareFileKindType class in the Model
type SoftwareFileKindType struct {
	ObjectRef SoftwareFileKindTypeRef
}
// SoftwareSbomType provides the SoftwareSbomType class in the Model
type SoftwareSbomType struct {
	ObjectRef SoftwareSbomTypeRef
}
// SoftwareSoftwarePurpose provides the SoftwareSoftwarePurpose class in the Model
type SoftwareSoftwarePurpose struct {
	ObjectRef SoftwareSoftwarePurposeRef
}
// BuildBuild provides the BuildBuild class in the Model
type BuildBuild struct {
	Element
	BuildBuildEndTime []DateTimeStamp
	BuildBuildId []string
	BuildBuildStartTime []DateTimeStamp
	BuildBuildType []string
	BuildConfigSourceDigest Hash
	BuildConfigSourceEntrypoint string
	BuildConfigSourceUri string
	BuildEnvironment DictionaryEntry
	BuildParameters DictionaryEntry
}
// Agent provides the Agent class in the Model
type Agent struct {
	Element
}
// Annotation provides the Annotation class in the Model
type Annotation struct {
	Element
	AnnotationType []AnnotationType
	ContentType []string
	Statement []string
	Subject []Element
}
// Artifact provides the Artifact class in the Model
type Artifact struct {
	Element
	BuiltTime []DateTimeStamp
	OriginatedBy Agent
	ReleaseTime []DateTimeStamp
	StandardName string
	SuppliedBy []Agent
	SupportLevel SupportType
	ValidUntilTime []DateTimeStamp
}
// Bundle provides the Bundle class in the Model
type Bundle struct {
	ElementCollection
	Context []string
}
// Hash provides the Hash class in the Model
type Hash struct {
	IntegrityMethod
	Algorithm []HashAlgorithm
	HashValue []string
}
// LifecycleScopedRelationship provides the LifecycleScopedRelationship class in the Model
type LifecycleScopedRelationship struct {
	Relationship
	Scope []LifecycleScopeType
}
// Organization provides the Organization class in the Model
type Organization struct {
	Agent
}
// Person provides the Person class in the Model
type Person struct {
	Agent
}
// SoftwareAgent provides the SoftwareAgent class in the Model
type SoftwareAgent struct {
	Agent
}
// ExpandedlicensingConjunctiveLicenseSet provides the ExpandedlicensingConjunctiveLicenseSet class in the Model
type ExpandedlicensingConjunctiveLicenseSet struct {
	SimplelicensingAnyLicenseInfo
	ExpandedlicensingMember SimplelicensingAnyLicenseInfo
}
// ExpandedlicensingCustomLicenseAddition provides the ExpandedlicensingCustomLicenseAddition class in the Model
type ExpandedlicensingCustomLicenseAddition struct {
	ExpandedlicensingLicenseAddition
}
// ExpandedlicensingDisjunctiveLicenseSet provides the ExpandedlicensingDisjunctiveLicenseSet class in the Model
type ExpandedlicensingDisjunctiveLicenseSet struct {
	SimplelicensingAnyLicenseInfo
	ExpandedlicensingMember SimplelicensingAnyLicenseInfo
}
// ExpandedlicensingExtendableLicense provides the ExpandedlicensingExtendableLicense class in the Model
type ExpandedlicensingExtendableLicense struct {
	SimplelicensingAnyLicenseInfo
}
// ExpandedlicensingIndividualLicensingInfo provides the ExpandedlicensingIndividualLicensingInfo class in the Model
type ExpandedlicensingIndividualLicensingInfo struct {
	SimplelicensingAnyLicenseInfo
}
// ExpandedlicensingLicense provides the ExpandedlicensingLicense class in the Model
type ExpandedlicensingLicense struct {
	ExpandedlicensingExtendableLicense
	ExpandedlicensingIsDeprecatedLicenseId []bool
	ExpandedlicensingIsFsfLibre []bool
	ExpandedlicensingIsOsiApproved []bool
	ExpandedlicensingLicenseXml []string
	ExpandedlicensingObsoletedBy []string
	ExpandedlicensingSeeAlso string
	ExpandedlicensingStandardLicenseHeader []string
	ExpandedlicensingStandardLicenseTemplate []string
	SimplelicensingLicenseText []string
}
// ExpandedlicensingListedLicense provides the ExpandedlicensingListedLicense class in the Model
type ExpandedlicensingListedLicense struct {
	ExpandedlicensingLicense
	ExpandedlicensingDeprecatedVersion []string
	ExpandedlicensingListVersionAdded []string
}
// ExpandedlicensingOrLaterOperator provides the ExpandedlicensingOrLaterOperator class in the Model
type ExpandedlicensingOrLaterOperator struct {
	ExpandedlicensingExtendableLicense
	ExpandedlicensingSubjectLicense []ExpandedlicensingLicense
}
// ExpandedlicensingWithAdditionOperator provides the ExpandedlicensingWithAdditionOperator class in the Model
type ExpandedlicensingWithAdditionOperator struct {
	SimplelicensingAnyLicenseInfo
	ExpandedlicensingSubjectAddition []ExpandedlicensingLicenseAddition
	ExpandedlicensingSubjectExtendableLicense []ExpandedlicensingExtendableLicense
}
// ExtensionCdxPropertiesExtension provides the ExtensionCdxPropertiesExtension class in the Model
type ExtensionCdxPropertiesExtension struct {
	ExtensionExtension
	ExtensionCdxProperty ExtensionCdxPropertyEntry
}
// SecurityCvssV2VulnAssessmentRelationship provides the SecurityCvssV2VulnAssessmentRelationship class in the Model
type SecurityCvssV2VulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityScore []float64
	SecurityVectorString []string
}
// SecurityCvssV3VulnAssessmentRelationship provides the SecurityCvssV3VulnAssessmentRelationship class in the Model
type SecurityCvssV3VulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityScore []float64
	SecuritySeverity []SecurityCvssSeverityType
	SecurityVectorString []string
}
// SecurityCvssV4VulnAssessmentRelationship provides the SecurityCvssV4VulnAssessmentRelationship class in the Model
type SecurityCvssV4VulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityScore []float64
	SecuritySeverity []SecurityCvssSeverityType
	SecurityVectorString []string
}
// SecurityEpssVulnAssessmentRelationship provides the SecurityEpssVulnAssessmentRelationship class in the Model
type SecurityEpssVulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityPercentile []float64
	SecurityProbability []float64
	SecurityPublishedTime []DateTimeStamp
}
// SecurityExploitCatalogVulnAssessmentRelationship provides the SecurityExploitCatalogVulnAssessmentRelationship class in the Model
type SecurityExploitCatalogVulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityCatalogType []SecurityExploitCatalogType
	SecurityExploited []bool
	SecurityLocator []string
}
// SecuritySsvcVulnAssessmentRelationship provides the SecuritySsvcVulnAssessmentRelationship class in the Model
type SecuritySsvcVulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityDecisionType []SecuritySsvcDecisionType
}
// SecurityVexVulnAssessmentRelationship provides the SecurityVexVulnAssessmentRelationship class in the Model
type SecurityVexVulnAssessmentRelationship struct {
	SecurityVulnAssessmentRelationship
	SecurityStatusNotes []string
	SecurityVexVersion []string
}
// SecurityVulnerability provides the SecurityVulnerability class in the Model
type SecurityVulnerability struct {
	Artifact
	SecurityModifiedTime []DateTimeStamp
	SecurityPublishedTime []DateTimeStamp
	SecurityWithdrawnTime []DateTimeStamp
}
// SoftwareSoftwareArtifact provides the SoftwareSoftwareArtifact class in the Model
type SoftwareSoftwareArtifact struct {
	Artifact
	SoftwareAdditionalPurpose SoftwareSoftwarePurpose
	SoftwareAttributionText string
	SoftwareContentIdentifier SoftwareContentIdentifier
	SoftwareCopyrightText []string
	SoftwarePrimaryPurpose []SoftwareSoftwarePurpose
}
// Bom provides the Bom class in the Model
type Bom struct {
	Bundle
}
// ExpandedlicensingCustomLicense provides the ExpandedlicensingCustomLicense class in the Model
type ExpandedlicensingCustomLicense struct {
	ExpandedlicensingLicense
}
// SecurityVexAffectedVulnAssessmentRelationship provides the SecurityVexAffectedVulnAssessmentRelationship class in the Model
type SecurityVexAffectedVulnAssessmentRelationship struct {
	SecurityVexVulnAssessmentRelationship
	SecurityActionStatement []string
	SecurityActionStatementTime DateTimeStamp
}
// SecurityVexFixedVulnAssessmentRelationship provides the SecurityVexFixedVulnAssessmentRelationship class in the Model
type SecurityVexFixedVulnAssessmentRelationship struct {
	SecurityVexVulnAssessmentRelationship
}
// SecurityVexNotAffectedVulnAssessmentRelationship provides the SecurityVexNotAffectedVulnAssessmentRelationship class in the Model
type SecurityVexNotAffectedVulnAssessmentRelationship struct {
	SecurityVexVulnAssessmentRelationship
	SecurityImpactStatement []string
	SecurityImpactStatementTime []DateTimeStamp
	SecurityJustificationType []SecurityVexJustificationType
}
// SecurityVexUnderInvestigationVulnAssessmentRelationship provides the SecurityVexUnderInvestigationVulnAssessmentRelationship class in the Model
type SecurityVexUnderInvestigationVulnAssessmentRelationship struct {
	SecurityVexVulnAssessmentRelationship
}
// SoftwareFile provides the SoftwareFile class in the Model
type SoftwareFile struct {
	SoftwareSoftwareArtifact
	SoftwareContentType []string
	SoftwareFileKind []SoftwareFileKindType
}
// SoftwarePackage provides the SoftwarePackage class in the Model
type SoftwarePackage struct {
	SoftwareSoftwareArtifact
	SoftwareDownloadLocation []string
	SoftwareHomePage []string
	SoftwarePackageUrl []string
	SoftwarePackageVersion []string
	SoftwareSourceInfo []string
}
// SoftwareSbom provides the SoftwareSbom class in the Model
type SoftwareSbom struct {
	Bom
	SoftwareSbomType SoftwareSbomType
}
// SoftwareSnippet provides the SoftwareSnippet class in the Model
type SoftwareSnippet struct {
	SoftwareSoftwareArtifact
	SoftwareByteRange []PositiveIntegerRange
	SoftwareLineRange []PositiveIntegerRange
	SoftwareSnippetFromFile []SoftwareFile
}
// AiAIPackage provides the AiAIPackage class in the Model
type AiAIPackage struct {
	SoftwarePackage
	AiAutonomyType []PresenceType
	AiDomain string
	AiEnergyConsumption []AiEnergyConsumption
	AiHyperparameter DictionaryEntry
	AiInformationAboutApplication []string
	AiInformationAboutTraining []string
	AiLimitation []string
	AiMetric DictionaryEntry
	AiMetricDecisionThreshold DictionaryEntry
	AiModelDataPreprocessing string
	AiModelExplainability string
	AiSafetyRiskAssessment []AiSafetyRiskAssessmentType
	AiStandardCompliance string
	AiTypeOfModel string
	AiUseSensitivePersonalInformation []PresenceType
}
// DatasetDatasetPackage provides the DatasetDatasetPackage class in the Model
type DatasetDatasetPackage struct {
	SoftwarePackage
	DatasetAnonymizationMethodUsed string
	DatasetConfidentialityLevel []DatasetConfidentialityLevelType
	DatasetDataCollectionProcess []string
	DatasetDataPreprocessing string
	DatasetDatasetAvailability []DatasetDatasetAvailabilityType
	DatasetDatasetNoise []string
	DatasetDatasetSize []uint
	DatasetDatasetType DatasetDatasetType
	DatasetDatasetUpdateMechanism []string
	DatasetHasSensitivePersonalInformation []PresenceType
	DatasetIntendedUse []string
	DatasetKnownBias string
	DatasetSensor DictionaryEntry
}
